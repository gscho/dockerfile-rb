grammar DockerfileRB::Dockerfile
  rule document
    (from | arg | cmd_exec | cmd_shell | line_break)* {
      parsed = matches.map(&:value).compact
      value = Hash.new {|h,k| h[k] = [] }
      parsed.each{|p| value[p.class.name.split('::').last.downcase].push p }
      value
    }
  end

  rule cmd_exec
    ('CMD' space '[' (quote cmd_term:(string) quote comma?)* ']') <DockerfileRB::CmdExecParser>
  end

  rule cmd_shell
    ('CMD' space (cmd_term:(string) space?)*) <DockerfileRB::CmdShellParser>
  end

  rule arg
    ('ARG' space arg_name:(string) '=' arg_value:(string)) <DockerfileRB::ArgParser>
  end

  rule from
    ('FROM' space from_term:(string) space? as?) <DockerfileRB::FromParser>
  end

  rule as
    ('AS' space as_term:(string)) {
      captures(:as_term)
    }
  end

  rule string
    [a-zA-Z0-9:.@/_]+
  end

  rule comma
    ','
  end

  rule quote
    '"'
  end

  rule space
    [ \t]*
  end

  rule indent
    [ \t\r\n]*
  end

  rule line_break
    (space? "\n" | space? "\r\n") { nil }
  end
end
