grammar DockerfileRB::Dockerfile
  rule document
    (from | arg | cmd_exec | line_break)* {
      parsed = matches.map(&:value).compact
      value = Hash.new {|h,k| h[k] = [] }
      parsed.each{|p| value[p.class.name.split('::').last.downcase].push p }
      value
    }
  end

  rule cmd_exec
    ('CMD' space '[' cmd_term:(quoted_string)* ']' line_break?) <DockerfileRB::CmdExecParser>
  end

  rule arg
    ('ARG' space arg_name:(string) '=' arg_value:(string) line_break?) <DockerfileRB::ArgParser>
  end

  rule from
    ('FROM' space from_term:(string) space? as* line_break?) <DockerfileRB::FromParser>
  end

  rule as
    ('AS' space as_term:(string)) {
      captures(:as_term)
    }
  end

  rule quoted_string
    quote string quote comma?
  end

  rule string
    ([a-zA-Z0-9:.@/_]*)
  end

  rule comma
    ','
  end

  rule quote
    '"'
  end

  rule space
    [ \t]*
  end

  rule indent
    [ \t\r\n]*
  end

  rule line_break
    (space? "\n" | space? "\r\n") { nil }
  end
end
