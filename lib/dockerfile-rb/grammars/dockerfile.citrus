grammar DockerfileRB::Dockerfile
  rule dockerfile
    (from | arg | copy | copy_with_whitespace | cmd_exec | cmd_shell | entrypoint_exec | entrypoint_shell | maintainer | user | workdir | line_break)* {
      parsed = matches.map(&:value).compact
      value = Hash.new {|h,k| h[k] = [] }
      parsed.each{|p| value[p.class.name.split('::').last.downcase].push p }
      value
    }
  end

  rule copy
    ('COPY' space arg_term:('--chown=' [a-zA-Z0-9.@/_\-\$\\]+ ':' [a-zA-Z0-9:.@/_\-\$\\]+)? space? src_term:(string) space dest_term:(string) ) <DockerfileRB::CopyParser>
  end

  rule copy_with_whitespace
    ('COPY' space arg_term:('--chown=' [a-zA-Z0-9.@/_\-\$\\]+ ':' [a-zA-Z0-9:.@/_\-\$\\]+)? space? '[' quote src_term:([a-zA-Z0-9.@/_\-\$\\ ]+) quote comma quote dest_term:([a-zA-Z0-9.@/_\-\$\\ ]+) quote ']' ) <DockerfileRB::CopyParser>
  end

  rule workdir
    ('WORKDIR' space quote? workdir_term:(string) quote?) <DockerfileRB::WorkdirParser>
  end

  rule user
    ('USER' space user_term:(string)) <DockerfileRB::UserParser>
  end

  rule entrypoint_exec
    ('ENTRYPOINT' space '[' (quote entrypoint_term:(string) quote comma?)* ']') <DockerfileRB::EntrypointExecParser>
  end

  rule entrypoint_shell
    ('ENTRYPOINT' space (entrypoint_term:(string) space?)*) <DockerfileRB::EntrypointShellParser>
  end

  rule cmd_exec
    ('CMD' space '[' (quote cmd_term:(string) quote comma?)* ']') <DockerfileRB::CmdExecParser>
  end

  rule cmd_shell
    ('CMD' space (cmd_term:(string) space?)*) <DockerfileRB::CmdShellParser>
  end

  rule maintainer
    ('MAINTAINER' space maintainer_term:(string)) <DockerfileRB::MaintainerParser>
  end

  rule arg
    ('ARG' space arg_name_term:(string) '=' arg_value_term:(string)) <DockerfileRB::ArgParser>
  end

  rule from
    ('FROM' space from_term:(string) space? as?) <DockerfileRB::FromParser>
  end

  rule as
    ('AS' space as_term:(string)) {
      captures(:as_term)
    }
  end

  rule string
    [a-zA-Z0-9:.@/_\-\$\\\[\]]+
  end

  rule comma
    space? ',' space?
  end

  rule quote
    space? '"' space?
  end

  rule space
    [ \t]*
  end

  rule indent
    [ \t\r\n]*
  end

  rule line_break
    (space? "\n" | space? "\r\n") { nil }
  end
end
